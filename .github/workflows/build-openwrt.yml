# SPDX-License-Identifier: MIT
# Build OpenWrt using GitHub Actions
# - A: Host MUSL (/opt/musl) 实拷贝 + 守卫 + 自检
# - B: 目标 mipsel MUSL 从 staging_dir 探测为“sysroot 根”（非 /lib）
# - C: 任何触发 Rust 的 make 前，行内显式注入 MUSL_*，并强打点
# - 仅使用下划线变量名（禁止带 '-' 的环境名）

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  # REPO_URL: https://github.com/gl-inet/gl-infra-builder
  REPO_URL: https://github.com/201821143044/gl-infra-builder-new
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -euo pipefail {0}

    steps:
    - name: Before freeing up disk space
      run: |
        echo "=============================================================================="
        echo "[DF BEFORE]"
        df -hT
        echo "=============================================================================="

    - name: Optimize Disk Space
      uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "=============================================================================="
        echo "[DF AFTER]"
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    # ----------------- 公共诊断工具 -----------------
    - name: Bootstrap diag helpers
      run: |
        set -euxo pipefail
        export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
        cat >/tmp/_diag.sh <<'EOS'
        set -euxo pipefail
        export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
        trace_env() {
          echo "----[DIAG] CWD=$(pwd)"
          echo "----[DIAG] PATH=$PATH"
          echo "----[DIAG] whoami=$(whoami)"
          echo "----[DIAG] date=$(date -Iseconds)"
          echo "----[DIAG] uname=$(uname -a)"
          echo "----[DIAG] TZ=$TZ"
          echo "----[DIAG] MUSL_ROOT vars (sorted):"
          env | grep -E '^MUSL_ROOT' | sort || true
        }
        guard_names() {
          # 禁止带 '-' 的环境名（防止被当命令执行）
          env | grep -E '^MUSL_ROOT_.*-' && { echo 'FATAL: dash in MUSL_ROOT_* var name'; exit 2; } || true
        }
        trap 'echo "----[TRAP] exit $? in ${BASH_SOURCE##*/}:${LINENO}"; trace_env || true' ERR
        EOS

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source /tmp/_diag.sh
        sudo rm -rf /etc/apt/sources.list.d* /usr/local/lib/android* /etc/docker* /etc/firefox* /etc/mysql* /etc/php* /opt/google* /usr/share/dotnet* /usr/share/google* /usr/share/moby* /usr/share/mysql* /usr/share/php*
        sudo -E apt-get -qq update
        sudo add-apt-repository -y universe
        sudo apt-get -y update
        sudo -E apt-get -qq install $(curl -fsSL raw.githubusercontent.com/wekingchen/my-file/master/depends-ubuntuLTS)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE
        bash --version
        gcc --version || true
        ldd --version || true
        trace_env

    # ===== A. Host MUSL (/opt/musl) 实拷贝 + 守卫 + 自检 =====
    - name: Prepare MUSL for Rust host (robust)
      run: |
        source /tmp/_diag.sh
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev rsync
        # 绝对路径落地：不用 symlink
        sudo rm -rf /opt/musl
        sudo mkdir -p /opt/musl/lib /opt/musl/include

        # headers：Ubuntu 22.04 多数头在 /usr/include
        sudo rsync -a /usr/include/ /opt/musl/include/

        # libs：尝试多种常见目录
        MUSL_LIB_DIR=""
        for d in /usr/lib/x86_64-linux-musl /usr/lib64/musl /usr/lib/musl; do
          if [ -d "$d" ] && ls "$d"/libc.a >/dev/null 2>&1; then MUSL_LIB_DIR="$d"; break; fi
        done
        if [ -z "$MUSL_LIB_DIR" ]; then
          echo "FATAL: cannot locate host musl static libs (libc.a). dpkg -L musl-dev:" >&2
          dpkg -L musl-dev || true
          exit 2
        fi
        sudo cp -av "$MUSL_LIB_DIR"/libc.a /opt/musl/lib/
        sudo cp -av "$MUSL_LIB_DIR"/libm.a /opt/musl/lib/ || true
        sudo cp -av "$MUSL_LIB_DIR"/crt*.o /opt/musl/lib/ || true

        # 导出环境
        {
          echo "MUSL_ROOT=/opt/musl"
          echo "RUST_MUSL_ROOT=/opt/musl"
          echo "MUSL_ROOT_x86_64_unknown_linux_musl=/opt/musl"
        } >> "$GITHUB_ENV"

        # 守卫 + 校验 + 打点
        guard_names
        test -f /opt/musl/lib/libc.a || { echo "FATAL: /opt/musl/lib/libc.a missing"; ls -l /opt/musl/lib; exit 2; }
        test -f /opt/musl/include/stdio.h || { echo "FATAL: /opt/musl/include missing headers"; ls -l /opt/musl/include | head; exit 2; }
        echo "== Host MUSL layout =="; ls -l /opt/musl/lib || true
        echo "== sha256sum libc.a =="; sha256sum /opt/musl/lib/libc.a || true

        # 实测编译最小程序（musl-gcc / x86_64-linux-musl-gcc）
        cat > /tmp/hello.c <<'EOF'
        int main(void){return 0;}
        EOF
        if command -v x86_64-linux-musl-gcc >/dev/null 2>&1; then
          CC_MUSL=x86_64-linux-musl-gcc
        else
          CC_MUSL=musl-gcc
        fi
        "$CC_MUSL" -static -o /tmp/hello /tmp/hello.c
        echo "== host musl hello size =="; file /tmp/hello; ldd /tmp/hello || true
        trace_env
    # =====================================================

    - name: Clone source code
      working-directory: ./
      run: |
        source /tmp/_diag.sh
        df -hT $PWD
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ln -sf /openwrt "$GITHUB_WORKSPACE/openwrt"
        cd openwrt
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        python3 setup.py -c ./configs/config-siflower-18.x.yml
        cd openwrt-18.06/siflower/openwrt-18.06
        ./scripts/gen_config.py target_siflower_gl-sft1200 luci
        trace_env

    - name: Load custom feeds
      run: |
        source /tmp/_diag.sh
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/openwrt-18.06/siflower/openwrt-18.06/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        "$GITHUB_WORKSPACE/$DIY_P1_SH"
        trace_env

    - name: Update feeds
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ./scripts/feeds update -a
        trace_env

    - name: Install feeds
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ./scripts/feeds install -a
        trace_env

    - name: Load custom configuration
      run: |
        source /tmp/_diag.sh
        [ -e files ] && mv files openwrt/openwrt-18.06/siflower/openwrt-18.06/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/openwrt-18.06/siflower/openwrt-18.06/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        "$GITHUB_WORKSPACE/$DIY_P2_SH"
        trace_env

    - name: Normalize OpenWrt config (defconfig)
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make defconfig
        trace_env

    - name: Build OpenWrt toolchain only
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make toolchain/install -j"$(nproc)"
        trace_env

    # ===== B. 目标 mipsel MUSL：从 staging_dir 探测“sysroot根”+ 强校验 =====
    - name: Detect mipsel musl sysroot (fail-fast)
      run: |
        source /tmp/_diag.sh
        guard_names
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ROOT=staging_dir

        echo ">>> Searching mipsel-musl libc.a in $ROOT"
        MIPS_LIBC=$(
          find "$ROOT" -maxdepth 10 -type f -name libc.a -path '*mipsel*musl*/lib/libc.a' \
          | grep 'toolchain-mipsel' -m1 || true
        )
        if [ -z "${MIPS_LIBC:-}" ]; then
          MIPS_LIBC=$(
            find "$ROOT" -maxdepth 10 -type f -name libc.a -path '*mipsel*musl*/lib/libc.a' \
            | grep 'target-mipsel' -m1 || true
          )
        fi
        if [ -z "${MIPS_LIBC:-}" ]; then
          echo "FATAL: target mipsel musl libc.a not found in $ROOT"; exit 3
        fi
        LIB_DIR="$(dirname "$MIPS_LIBC")"
        PARENT="$(basename "$(dirname "$LIB_DIR")")"

        if [ "$PARENT" = "usr" ]; then
          MUSL_USR="$(dirname "$LIB_DIR")"   # …/usr
          echo "MUSL_ROOT_mipsel_unknown_linux_musl=$MUSL_USR" >> "$GITHUB_ENV"
          echo "Verified: $MUSL_USR/lib/libc.a"
          test -f "$MUSL_USR/lib/libc.a"
          echo "==TARGET $MUSL_USR/lib=="; ls -l "$MUSL_USR/lib" | sed -n '1,120p'
        else
          # …/lib/libc.a 的上一级就是 sysroot 根/三元组目录
          echo "MUSL_ROOT_mipsel_unknown_linux_musl=$(dirname "$LIB_DIR")" >> "$GITHUB_ENV"
          echo "Verified: $LIB_DIR/libc.a"
          test -f "$LIB_DIR/libc.a"
          echo "==TARGET $LIB_DIR=="; ls -l "$LIB_DIR" | sed -n '1,120p'
        fi
        trace_env
    # =====================================================

    # ===== C. Rust host 预检（行内注入 + 打点 + 守卫） =====
    - name: Preflight — rust/host (fail-fast diag)
      run: |
        source /tmp/_diag.sh
        guard_names
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        test -f /opt/musl/lib/libc.a
        echo '==HOST /opt/musl/lib=='; ls -l /opt/musl/lib | sed -n '1,120p'
        MUSL_ROOT="/opt/musl" \
        RUST_MUSL_ROOT="/opt/musl" \
        MUSL_ROOT_x86_64_unknown_linux_musl="/opt/musl" \
        make -j1 V=sc package/feeds/packages2/rust/host/compile
        trace_env
    # =====================================================

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make download -j8
        trace_env

    - name: Compile the firmware
      id: compile
      run: |
        source /tmp/_diag.sh
        guard_names
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        echo -e "$(nproc) thread compile"

        # 目标侧 MUSL_ROOT 必须为绝对路径且存在 libc.a
        : "${MUSL_ROOT_mipsel_unknown_linux_musl:?target MUSL_ROOT empty}"
        case "${MUSL_ROOT_mipsel_unknown_linux_musl}" in /*) ;; *) echo "FATAL: target MUSL_ROOT not absolute: ${MUSL_ROOT_mipsel_unknown_linux_musl}"; exit 2;; esac
        test -f "${MUSL_ROOT_mipsel_unknown_linux_musl}/lib/libc.a"

        echo '==HOST /opt/musl/lib=='; ls -l /opt/musl/lib | sed -n '1,80p'
        echo "==TARGET ${MUSL_ROOT_mipsel_unknown_linux_musl}/lib=="; ls -l "${MUSL_ROOT_mipsel_unknown_linux_musl}/lib" | sed -n '1,80p'

        # 行内显式注入（仅下划线变量名）
        MUSL_ROOT="/opt/musl" \
        RUST_MUSL_ROOT="/opt/musl" \
        MUSL_ROOT_x86_64_unknown_linux_musl="/opt/musl" \
        MUSL_ROOT_mipsel_unknown_linux_musl="${MUSL_ROOT_mipsel_unknown_linux_musl}" \
        MUSL_ROOT_mipsel_openwrt_linux_musl="${MUSL_ROOT_mipsel_openwrt_linux_musl:-${MUSL_ROOT_mipsel_unknown_linux_musl}}" \
        make -j"$(nproc)" V=s

        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        trace_env

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/openwrt-18.06/siflower/openwrt-18.06/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /home/runner/work/Actions-SFT1200/Actions-SFT1200/openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/siflower/openwrt-*squashfs*

    - name: Delete workflow runs
      uses: wekingchen/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 10

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
