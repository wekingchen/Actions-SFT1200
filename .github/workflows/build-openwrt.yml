# SPDX-License-Identifier: MIT
# Build OpenWrt using GitHub Actions
# - Host MUSL sysroot (/opt/musl) with real copy & strong checks
# - Auto-detect target mipsel MUSL from staging_dir (absolute path)
# - Preflight rust/host build (quick fail-fast + rich diagnostics)
# - Print shadowsocks-rust Makefile dump.txt if exists (auto find)
# - Use ONLY underscore env names (no dash in var names)

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  # REPO_URL: https://github.com/gl-inet/gl-infra-builder
  REPO_URL: https://github.com/201821143044/gl-infra-builder-new
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -euo pipefail {0}

    steps:
    - name: Before freeing up disk space
      run: |
        echo "=============================================================================="
        echo "[DF BEFORE]"
        df -hT
        echo "=============================================================================="

    - name: Optimize Disk Space
      uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "=============================================================================="
        echo "[DF AFTER]"
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    # ----------------- Common diag helpers -----------------
    - name: Bootstrap diag helpers
      run: |
        set -euxo pipefail
        export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
        cat >/tmp/_diag.sh <<'EOS'
        set -euxo pipefail
        export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
        trace_env() {
          echo "----[DIAG] CWD=$(pwd)"
          echo "----[DIAG] PATH=$PATH"
          echo "----[DIAG] whoami=$(whoami)"
          echo "----[DIAG] date=$(date -Iseconds)"
          echo "----[DIAG] uname=$(uname -a)"
          echo "----[DIAG] TZ=$TZ"
          echo "----[DIAG] MUSL_ROOT vars (sorted):"
          env | grep -E '^MUSL_ROOT' | sort || true
        }
        trap 'echo "----[TRAP] exit $? in ${BASH_SOURCE##*/}:${LINENO}"; trace_env || true' ERR
        EOS

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source /tmp/_diag.sh
        sudo rm -rf /etc/apt/sources.list.d* /usr/local/lib/android* /etc/docker* /etc/firefox* /etc/mysql* /etc/php* /opt/google* /usr/share/dotnet* /usr/share/google* /usr/share/moby* /usr/share/mysql* /usr/share/php*
        sudo -E apt-get -qq update
        sudo add-apt-repository -y universe
        sudo apt-get -y update
        sudo -E apt-get -qq install $(curl -fsSL raw.githubusercontent.com/wekingchen/my-file/master/depends-ubuntuLTS)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE
        bash --version
        gcc --version || true
        ldd --version || true
        trace_env

    # ---------- Host 侧：/opt/musl 用“实拷贝”方式，强校验 ----------
    - name: Prepare MUSL sysroot for Rust (host, fail-fast)
      run: |
        source /tmp/_diag.sh
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev rsync
        sudo rm -rf /opt/musl
        sudo mkdir -p /opt/musl/lib /opt/musl/include
        sudo rsync -a /usr/lib/x86_64-linux-musl/ /opt/musl/lib/
        sudo rsync -a /usr/include/ /opt/musl/include/
        echo "MUSL_ROOT=/opt/musl"                                      >> $GITHUB_ENV
        echo "RUST_MUSL_ROOT=/opt/musl"                                 >> $GITHUB_ENV
        echo "MUSL_ROOT_x86_64_unknown_linux_musl=/opt/musl"            >> $GITHUB_ENV
        test -f /opt/musl/lib/libc.a || { echo "FATAL: /opt/musl/lib/libc.a missing"; ls -l /opt/musl/lib || true; exit 2; }
        file /opt/musl/lib/libc.a || true
        ls -al /opt/musl/lib | sed -n '1,120p'
        trace_env
    # ------------------------------------------------------

    - name: Clone source code
      working-directory: ./
      run: |
        source /tmp/_diag.sh
        df -hT $PWD
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ln -sf /openwrt "$GITHUB_WORKSPACE/openwrt"
        cd openwrt
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        python3 setup.py -c ./configs/config-siflower-18.x.yml
        cd openwrt-18.06/siflower/openwrt-18.06
        ./scripts/gen_config.py target_siflower_gl-sft1200 luci
        trace_env

    - name: Load custom feeds
      run: |
        source /tmp/_diag.sh
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/openwrt-18.06/siflower/openwrt-18.06/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        "$GITHUB_WORKSPACE/$DIY_P1_SH"
        trace_env

    - name: Update feeds
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ./scripts/feeds update -a
        trace_env

    - name: Install feeds
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ./scripts/feeds install -a
        trace_env

    - name: Load custom configuration
      run: |
        source /tmp/_diag.sh
        [ -e files ] && mv files openwrt/openwrt-18.06/siflower/openwrt-18.06/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/openwrt-18.06/siflower/openwrt-18.06/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        "$GITHUB_WORKSPACE/$DIY_P2_SH"
        trace_env

    - name: Normalize OpenWrt config (defconfig)
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make defconfig
        trace_env

    - name: Build OpenWrt toolchain only
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make toolchain/install -j"$(nproc)"
        trace_env

    # ---------- 关键：从 staging_dir 探测 mipsel musl（绝对路径 + 强校验 + 打点） ----------
    - name: Detect mipsel musl sysroot & export MUSL_ROOT_* (absolute)
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ROOT="staging_dir"
        echo ">>> Searching mipsel-musl libc.a in $ROOT..."
        MIPS_LIBC=$(
          find "$ROOT" -maxdepth 9 -type f -name 'libc.a' -path '*mipsel*musl*/lib/libc.a' \
          | grep 'toolchain-mipsel' -m1 || true
        )
        if [ -z "${MIPS_LIBC:-}" ]; then
          MIPS_LIBC=$(
            find "$ROOT" -maxdepth 9 -type f -name 'libc.a' -path '*mipsel*musl*/lib/libc.a' \
            | grep 'target-mipsel' -m1 || true
          )
        fi
        [ -n "${MIPS_LIBC:-}" ] || { echo "FATAL: target mipsel musl libc.a not found in $ROOT"; exit 3; }

        LIB_DIR="$(dirname "$MIPS_LIBC")"              # …/lib
        MUSL_ROOT_CAND="$(dirname "$LIB_DIR")"         # …/（包含 lib/ 的上一级）
        MUSL_ROOT_ABS="$(readlink -f "$MUSL_ROOT_CAND")"

        echo "DETECTED_MIPS_LIBC=$MIPS_LIBC"
        echo "DETECTED_MUSL_ROOT_ABS=$MUSL_ROOT_ABS"
        ls -l "$LIB_DIR" || true
        file "$MUSL_ROOT_ABS/lib/libc.a" || true

        TEST="$MUSL_ROOT_ABS/lib/libc.a"
        [ -f "$TEST" ] || { echo "FATAL: expected $TEST"; exit 2; }

        # 同步导出（覆盖 unknown / openwrt 两种 vendor）
        echo "MUSL_ROOT_mipsel_unknown_linux_musl=$MUSL_ROOT_ABS" >> $GITHUB_ENV
        echo "MUSL_ROOT_mipsel_openwrt_linux_musl=$MUSL_ROOT_ABS" >> $GITHUB_ENV

        echo "----[DIAG] Exported MUSL_ROOT_* to \$GITHUB_ENV"
        trace_env

    # ---------- 预检：只编 rust host（数分钟内验证），内联传入 host MUSL 根 ----------
    - name: 17_Preflight — build rust host only (quick check)
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06

        # Fail-fast：变量必须为绝对路径，且存在 libc.a
        : "${MUSL_ROOT_x86_64_unknown_linux_musl:=/opt/musl}"
        case "${MUSL_ROOT_x86_64_unknown_linux_musl}" in /*) ;; *) echo "FATAL: HOST MUSL_ROOT is NOT absolute: ${MUSL_ROOT_x86_64_unknown_linux_musl}"; exit 2;; esac
        test -f "${MUSL_ROOT_x86_64_unknown_linux_musl}/lib/libc.a"

        rustc --version || true
        cargo --version || true
        realpath /opt/musl || true
        ls -al /opt/musl/lib || true

        # 清理 + 预编译（把 host 侧 MUSL 根内联传入，确保 rust 能读到）
        MUSL_ROOT_x86_64_unknown_linux_musl="${MUSL_ROOT_x86_64_unknown_linux_musl}" \
        RUST_MUSL_ROOT="/opt/musl" \
        make package/feeds/packages2/rust/host/clean V=sc

        MUSL_ROOT_x86_64_unknown_linux_musl="${MUSL_ROOT_x86_64_unknown_linux_musl}" \
        RUST_MUSL_ROOT="/opt/musl" \
        make package/feeds/packages2/rust/host/compile V=sc

        echo "----[DIAG] Preflight rust/host passed."
        trace_env

    # ---------- 打印 shadowsocks-rust 的 Makefile dump（自动查找路径） ----------
    - name: Show shadowsocks-rust Makefile dump (if present)
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        echo ">>> Looking for shadowsocks-rust dump files under logs/feeds/ ..."
        FOUND=0
        while IFS= read -r f; do
          FOUND=1
          echo "----- [DUMP] $f (head) -----"
          sed -n '1,240p' "$f" || true
          echo "----- [DUMP END] $f -----"
        done < <(find logs/feeds -type f -path '*/shadowsocks-rust/*/dump.txt' 2>/dev/null || true)
        if [ "$FOUND" -eq 0 ]; then
          echo "No shadowsocks-rust dump.txt found (feeds may be clean or path differs)."
        fi
        trace_env

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make download -j8
        trace_env

    - name: Compile the firmware
      id: compile
      run: |
        source /tmp/_diag.sh
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        echo -e "$(nproc) thread compile"

        # Fail-fast：目标侧 MUSL_ROOT 必须为绝对路径且存在 libc.a
        : "${MUSL_ROOT_mipsel_unknown_linux_musl:?MUSL_ROOT_mipsel_unknown_linux_musl is EMPTY. Detect step missing?}"
        case "${MUSL_ROOT_mipsel_unknown_linux_musl}" in /*) ;; *) echo "FATAL: TARGET MUSL_ROOT is NOT absolute: ${MUSL_ROOT_mipsel_unknown_linux_musl}"; exit 2;; esac
        test -f "${MUSL_ROOT_mipsel_unknown_linux_musl}/lib/libc.a"

        # 显式传入（仅下划线变量名；不使用任何带 '-' 的名）
        MUSL_ROOT="/opt/musl" \
        RUST_MUSL_ROOT="/opt/musl" \
        MUSL_ROOT_x86_64_unknown_linux_musl="/opt/musl" \
        MUSL_ROOT_mipsel_unknown_linux_musl="${MUSL_ROOT_mipsel_unknown_linux_musl}" \
        MUSL_ROOT_mipsel_openwrt_linux_musl="${MUSL_ROOT_mipsel_openwrt_linux_musl:-${MUSL_ROOT_mipsel_unknown_linux_musl}}" \
        make -j"$(nproc)" V=s

        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        trace_env

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/openwrt-18.06/siflower/openwrt-18.06/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /home/runner/work/Actions-SFT1200/Actions-SFT1200/openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/siflower/openwrt-*squashfs*

    - name: Delete workflow runs
      uses: wekingchen/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 10

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
