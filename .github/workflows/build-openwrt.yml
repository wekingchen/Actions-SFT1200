name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/201821143044/gl-infra-builder-new
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Before freeing up disk space
      run: |
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Optimize Disk Space
      uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d* /usr/local/lib/android* /etc/docker* /etc/firefox* /etc/mysql* /etc/php* /opt/google* /usr/share/dotnet* /usr/share/google* /usr/share/moby* /usr/share/mysql* /usr/share/php*
        sudo -E apt-get -qq update
        sudo add-apt-repository universe
        sudo apt-get update
        sudo -E apt-get -qq install $(curl -fsSL raw.githubusercontent.com/wekingchen/my-file/master/depends-ubuntuLTS)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    # =============== Host 侧兜底：规范化 MUSL_ROOT（供 Rust 自检） ===============
    - name: Prepare musl for Rust bootstrap (host fallback)
      run: |
        set -eux
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
        sudo mkdir -p /opt/musl
        sudo ln -sfn /usr/include /opt/musl/include
        LIBC_A=$(dpkg -L musl-dev | grep '/libc\.a$' | head -n1 || true)
        if [ -z "$LIBC_A" ]; then
          echo "musl-dev installed but libc.a not found"; exit 1;
        fi
        sudo ln -sfn "$(dirname "$LIBC_A")" /opt/musl/lib
        echo "MUSL_ROOT=/opt/musl" >> $GITHUB_ENV
        echo "RUST_MUSL_ROOT=/opt/musl" >> $GITHUB_ENV
    # ============================================================================

    - name: Clone source code
      run: |
        set -eux
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        python3 setup.py -c ./configs/config-siflower-18.x.yml
        cd openwrt-18.06/siflower/openwrt-18.06
        ./scripts/gen_config.py target_siflower_gl-sft1200 luci

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/openwrt-18.06/siflower/openwrt-18.06/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt/openwrt-18.06/siflower/openwrt-18.06 && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt/openwrt-18.06/siflower/openwrt-18.06 && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/openwrt-18.06/siflower/openwrt-18.06/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/openwrt-18.06/siflower/openwrt-18.06/.config
        chmod +x $DIY_P2_SH
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Normalize OpenWrt config (defconfig)
      run: |
        set -eux
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make defconfig

    # ==================== 仅构建工具链（生成 mipsel sysroot） ====================
    - name: Build OpenWrt toolchain only
      run: |
        set -eux
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make toolchain/install -j"$(nproc)"
    # ============================================================================

    # ========== 探测 mipsel-linux-musl 的 sysroot 并导出 target 专用变量 ==========
    - name: Detect mipsel musl sysroot & export MUSL_ROOT_mipsel_*
      run: |
        set -eux
        ROOT="openwrt/openwrt-18.06/siflower/openwrt-18.06/staging_dir"

        # 优先使用 toolchain 的 sysroot，其次 target 的 sysroot
        MIPS_SYSROOT=""
        if [ -d "$ROOT" ]; then
          # 典型：staging_dir/toolchain-mipsel_*/lib/libc.a 或 */usr/lib/libc.a
          CANDS=$(grep -rsl --include='libc.a' '' "$ROOT" || true)
          # 优先包含 'toolchain-mipsel' 且带 'musl'
          MIPS_SYSROOT=$(echo "$CANDS" | grep 'toolchain-mipsel' | grep 'musl' | head -n1 || true)
          if [ -z "$MIPS_SYSROOT" ]; then
            MIPS_SYSROOT=$(echo "$CANDS" | grep 'target-mipsel' | grep 'musl' | head -n1 || true)
          fi
        fi

        if [ -z "$MIPS_SYSROOT" ]; then
          echo "FATAL: mipsel musl libc.a not found under $ROOT"; exit 3;
        fi

        # 推导 sysroot 的 'usr' 目录：如果 libc.a 位于 .../usr/lib/libc.a，则 MUSL_ROOT 指向 .../usr
        LIB_DIR=$(dirname "$MIPS_SYSROOT")                    # .../lib
        USR_DIR=$(dirname "$LIB_DIR")                         # .../usr
        if [ "$(basename "$USR_DIR")" != "usr" ]; then
          # 有些布局是 .../lib/libc.a（无 usr），那就让 MUSL_ROOT 指向上级并补一个 usr
          USR_DIR="$LIB_DIR"
        fi

        echo "DETECTED_TARGET_MUSL_USR=${USR_DIR}"
        echo "MUSL_ROOT_mipsel_unknown_linux_musl=${USR_DIR}" >> $GITHUB_ENV
        echo "MUSL_ROOT_mipsel-unknown-linux-musl=${USR_DIR}" >> $GITHUB_ENV

        # 同时把 host 的也带上（有些脚本会顺手检查）
        echo "MUSL_ROOT_x86_64_unknown_linux_musl=/opt/musl" >> $GITHUB_ENV
        echo "MUSL_ROOT_x86_64-unknown-linux-musl=/opt/musl" >> $GITHUB_ENV
    # ============================================================================

    # ============================ fail-fast 双侧校验 =============================
    - name: Verify MUSL roots (host & mipsel target)
      run: |
        set -eux
        : "${MUSL_ROOT:=/opt/musl}"
        test -f "${MUSL_ROOT}/lib/libc.a" || (ls -l "${MUSL_ROOT}/lib" || true; exit 2)
        for V in MUSL_ROOT_mipsel_unknown_linux_musl MUSL_ROOT_mipsel-unknown-linux-musl; do
          if [ -z "${!V:-}" ]; then
            echo "FATAL: $V not set"; exit 2
          fi
          test -f "${!V}/lib/libc.a" || (echo "$V=${!V}"; ls -l "${!V}/lib" || true; exit 2)
        done
    # ============================================================================

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make download -j8
        
    - name: Compile the firmware
      id: compile
      run: |
        set -eux
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        echo -e "$(nproc) thread compile"

        ENVVARS=(
          MUSL_ROOT="${MUSL_ROOT:-/opt/musl}"
          RUST_MUSL_ROOT="${RUST_MUSL_ROOT:-/opt/musl}"
          MUSL_ROOT_mipsel_unknown_linux_musl="${MUSL_ROOT_mipsel_unknown_linux_musl}"
          MUSL_ROOT_mipsel-unknown-linux-musl="${MUSL_ROOT_mipsel-unknown-linux-musl}"
          MUSL_ROOT_x86_64_unknown_linux_musl="/opt/musl"
          MUSL_ROOT_x86_64-unknown-linux-musl="/opt/musl"
        )

        if ! "${ENVVARS[@]}" make -j"$(nproc)"; then
          "${ENVVARS[@]}" make -j1 V=s
        fi

        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/openwrt-18.06/siflower/openwrt-18.06/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /home/runner/work/Actions-SFT1200/Actions-SFT1200/openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/siflower/openwrt-*squashfs*

    - name: Delete workflow runs
      uses: wekingchen/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 10

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
