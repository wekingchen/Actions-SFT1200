# Copyright (c) 2019-2020 P3TERX
# MIT License
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  # REPO_URL: https://github.com/gl-inet/gl-infra-builder
  REPO_URL: https://github.com/201821143044/gl-infra-builder-new
  REPO_BRANCH: main
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Before freeing up disk space
      shell: bash
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.1"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      shell: bash
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      shell: bash
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d* /usr/local/lib/android* /etc/docker* /etc/firefox* /etc/mysql* /etc/php* /opt/google* /usr/share/dotnet* /usr/share/google* /usr/share/moby* /usr/share/mysql* /usr/share/php*
        sudo -E apt-get -qq update
        sudo add-apt-repository -y universe
        sudo apt-get update
        sudo -E apt-get -qq install $(curl -fsSL raw.githubusercontent.com/wekingchen/my-file/master/depends-ubuntuLTS)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo chown "$USER:$GROUPS" "$GITHUB_WORKSPACE"

    # ---------- 新增：Host 侧兜底，规范化 MUSL_ROOT 到 /opt/musl ----------
    - name: Prepare musl for Rust bootstrap (host fallback)
      shell: bash
      run: |
        set -eux
        sudo apt-get update
        sudo apt-get install -y musl-tools musl-dev
        sudo mkdir -p /opt/musl
        sudo ln -sfn /usr/include /opt/musl/include
        LIBC_A="$(dpkg -L musl-dev | grep '/libc\.a$' | head -n1 || true)"
        if [ -z "$LIBC_A" ]; then
          echo "musl-dev installed but libc.a not found"; exit 1;
        fi
        sudo ln -sfn "$(dirname "$LIBC_A")" /opt/musl/lib
        echo "MUSL_ROOT=/opt/musl" >> "$GITHUB_ENV"
        echo "RUST_MUSL_ROOT=/opt/musl" >> "$GITHUB_ENV"
    # -------------------------------------------------------------------

    - name: Clone source code
      shell: bash
      working-directory: ./
      run: |
        df -hT "$PWD"
        git clone "$REPO_URL" -b "$REPO_BRANCH" openwrt
        ln -sfn /openwrt "$GITHUB_WORKSPACE/openwrt"
        cd openwrt
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        python3 setup.py -c ./configs/config-siflower-18.x.yml && cd openwrt-18.06/siflower/openwrt-18.06
        ./scripts/gen_config.py target_siflower_gl-sft1200 luci

    - name: Load custom feeds
      shell: bash
      run: |
        [ -e "$FEEDS_CONF" ] && mv "$FEEDS_CONF" openwrt/openwrt-18.06/siflower/openwrt-18.06/feeds.conf.default
        chmod +x "$DIY_P1_SH"
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: Update feeds
      shell: bash
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ./scripts/feeds update -a

    - name: Install feeds
      shell: bash
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ./scripts/feeds install -a

    - name: Load custom configuration
      shell: bash
      run: |
        [ -e files ] && mv files openwrt/openwrt-18.06/siflower/openwrt-18.06/files
        [ -e "$CONFIG_FILE" ] && mv "$CONFIG_FILE" openwrt/openwrt-18.06/siflower/openwrt-18.06/.config
        chmod +x "$DIY_P2_SH"
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    # ---------- 新增：收敛 Kconfig 循环/自选依赖 ----------
    - name: Normalize OpenWrt config (defconfig)
      shell: bash
      run: |
        set -eux
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make defconfig
    # ------------------------------------------------------

    # ---------- 新增：仅构建 toolchain + 探测 mipsel sysroot 并校验 ----------
    - name: Build OpenWrt toolchain only
      shell: bash
      run: |
        set -eux
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make toolchain/install -j"$(nproc)"

    - name: Detect mipsel musl sysroot & verify
      shell: bash
      run: |
        set -euo pipefail
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        ROOT="staging_dir"

        # 找 mipsel+musl 的 libc.a（优先 toolchain，再退 target）
        MIPS_LIBC=""
        while IFS= read -r -d '' f; do
          if echo "$f" | grep -q 'toolchain-mipsel'; then MIPS_LIBC="$f"; break; fi
        done < <(find "$ROOT" -maxdepth 7 -type f -name 'libc.a' -path '*mipsel*musl*/lib/libc.a' -print0 2>/dev/null)
        if [ -z "${MIPS_LIBC:-}" ]; then
          while IFS= read -r -d '' f; do
            if echo "$f" | grep -q 'target-mipsel'; then MIPS_LIBC="$f"; break; fi
          done < <(find "$ROOT" -maxdepth 7 -type f -name 'libc.a' -path '*mipsel*musl*/lib/libc.a' -print0 2>/dev/null)
        fi
        if [ -z "${MIPS_LIBC:-}" ]; then
          echo "FATAL: cannot locate mipsel musl libc.a in $ROOT"; exit 3
        fi

        LIB_DIR="$(dirname "$MIPS_LIBC")"     # …/lib
        PARENT_DIR="$(dirname "$LIB_DIR")"    # 包含 lib/ 的上一级
        echo "DETECTED_MIPS_LIBC=$MIPS_LIBC"
        echo "DETECTED_LIB_DIR=$LIB_DIR"
        echo "DETECTED_PARENT_DIR=$PARENT_DIR"

        MUSL_ROOT_CAND="$PARENT_DIR"
        TEST_PATH="$MUSL_ROOT_CAND/lib/libc.a"
        if [ ! -f "$TEST_PATH" ]; then
          echo "FATAL: expected libc at: $TEST_PATH"
          ls -l "$(dirname "$TEST_PATH")" || true
          exit 2
        fi

        echo "MUSL_ROOT_mipsel_unknown_linux_musl=$MUSL_ROOT_CAND" >> "$GITHUB_ENV"
        echo "MUSL_ROOT_x86_64_unknown_linux_musl=/opt/musl" >> "$GITHUB_ENV"

        : "${MUSL_ROOT:=/opt/musl}"
        test -f "${MUSL_ROOT}/lib/libc.a" || { echo "FATAL: ${MUSL_ROOT}/lib/libc.a not found"; ls -l "${MUSL_ROOT}/lib" || true; exit 2; }

        env | grep -E '^MUSL_ROOT_.*-' && { echo "FATAL: illegal env var with '-' found above"; exit 2; } || true
    # --------------------------------------------------------------------

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      shell: bash
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        make download -j8

    # ---------- 新增：强制给 Rust bootstrap 写入 musl-root（防止环境被清理） ----------
    - name: Patch Rust bootstrap musl-root (force, survives env clean)
      shell: bash
      run: |
        set -eux
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06

        : "${MUSL_ROOT_mipsel_unknown_linux_musl:?MUSL_ROOT_mipsel_unknown_linux_musl not set}"

        ROOT_PWD="$PWD"
        FOUND=0

        # (A) 若已生成 bootstrap.toml，直接 patch（不用进程替换）
        while IFS= read -r -d '' f; do
          FOUND=1
          echo "[patch] target musl-root -> $f"
          awk -v mips="${MUSL_ROOT_mipsel_unknown_linux_musl}" '
            BEGIN{skip=0}
            /^\[target\.mipsel-unknown-linux-musl\]/{skip=1}
            /^\[target\.x86_64-unknown-linux-musl\]/{skip=1}
            /^\[target\./{if(skip){skip=0}; print; next}
            {if(!skip) print}
            END{
              print "[target.mipsel-unknown-linux-musl]"
              print "musl-root = \"" mips "\""
              print ""
              print "[target.x86_64-unknown-linux-musl]"
              print "musl-root = \"/opt/musl\""
            }
          ' "$f" > "$f.new"
          mv -f "$f.new" "$f"
          echo "---- patched $f ----"
          tail -n 12 "$f" || true
        done < <(find build_dir -type f -name 'bootstrap.toml' -print0 2>/dev/null)

        # (B) 若尚未生成，引入模板 config.toml（避免 Here-Doc，改用 printf）
        if [ "$FOUND" -eq 0 ]; then
          # 遍历可能的 rust 源码目录（存在就写一份，不存在也无害）
          while IFS= read -r d; do
            cfg="$d/config.toml"
            echo "[patch] write template config.toml to $cfg"
            mkdir -p "$d"
            printf '%s\n' \
'[build]' \
'' \
'[target.mipsel-unknown-linux-musl]' \
"musl-root = \"${MUSL_ROOT_mipsel_unknown_linux_musl}\"" \
'' \
'[target.x86_64-unknown-linux-musl]' \
'musl-root = "/opt/musl"' \
            > "$cfg"
          done <<'LIST_END'
dl
feeds
.
LIST_END
        fi

        # 兜底导出 host 侧
        echo "MUSL_ROOT_x86_64_unknown_linux_musl=/opt/musl" >> "$GITHUB_ENV"
        echo "[env] MUSL_ROOT_mipsel_unknown_linux_musl=${MUSL_ROOT_mipsel_unknown_linux_musl}"
        echo "[env] MUSL_ROOT_x86_64_unknown_linux_musl=${MUSL_ROOT_x86_64_unknown_linux_musl:-/opt/musl}"
    # -----------------------------------------------------------------------------------

    # ---------- 新增：编译前 sanity 打印 ----------
    - name: Sanity — show MUSL roots & libc.a
      shell: bash
      run: |
        set -eux
        echo "MUSL_ROOT_mipsel_unknown_linux_musl=${MUSL_ROOT_mipsel_unknown_linux_musl:-<unset>}"
        echo "MUSL_ROOT_x86_64_unknown_linux_musl=${MUSL_ROOT_x86_64_unknown_linux_musl:-<unset>}"
        if [ -n "${MUSL_ROOT_mipsel_unknown_linux_musl:-}" ]; then ls -l "${MUSL_ROOT_mipsel_unknown_linux_musl}/lib" || true; fi
        if [ -n "${MUSL_ROOT:-}" ]; then ls -l "${MUSL_ROOT}/lib" || true; fi
    # ---------------------------------------------

    - name: Compile the firmware
      id: compile
      shell: bash
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06
        echo -e "$(nproc) thread compile"
        # 显式传入 MUSL 相关变量（注意：只能用下划线变量名）
        MUSL_ROOT="${MUSL_ROOT:-/opt/musl}" \
        RUST_MUSL_ROOT="${RUST_MUSL_ROOT:-/opt/musl}" \
        MUSL_ROOT_mipsel_unknown_linux_musl="${MUSL_ROOT_mipsel_unknown_linux_musl}" \
        MUSL_ROOT_x86_64_unknown_linux_musl="${MUSL_ROOT_x86_64_unknown_linux_musl:-/opt/musl}" \
        make -j"$(nproc)" V=s
        # make -j1 V=s
        echo "status=success" >> "$GITHUB_OUTPUT"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> "$GITHUB_ENV"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> "$GITHUB_ENV"
    
    - name: Check space usage
      if: (!cancelled())
      shell: bash
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/openwrt-18.06/siflower/openwrt-18.06/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      shell: bash
      run: |
        cd openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> "$GITHUB_ENV"
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      shell: bash
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress "${FIRMWARE}" 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(grep https cowtransfer.log)"
        echo "url=$(grep https cowtransfer.log | cut -f3 -d" ")" >> "$GITHUB_OUTPUT"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      shell: bash
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress "${FIRMWARE}" 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(grep https wetransfer.log)"
        echo "url=$(grep https wetransfer.log | cut -f3 -d" ")" >> "$GITHUB_OUTPUT"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      shell: bash
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> "$GITHUB_OUTPUT"
        touch release.txt
        [ "$UPLOAD_COWTRANSFER" = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ "$UPLOAD_WETRANSFER" = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> "$GITHUB_OUTPUT"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: /home/runner/work/Actions-SFT1200/Actions-SFT1200/openwrt/openwrt-18.06/siflower/openwrt-18.06/bin/targets/siflower/openwrt-*squashfs*

    - name: Delete workflow runs
      uses: wekingchen/delete-workflow-runs@main
      with:
        retain_days: 30
        keep_minimum_runs: 10

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
